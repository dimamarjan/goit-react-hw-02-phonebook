{"version":3,"sources":["components/ContactForm/ContactForm.style.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.style.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.style.jsx","components/ContactList/ContactList.jsx","App.js","reportWebVitals.js","index.js"],"names":["FormPhoneBook","styled","form","LabelForm","label","LabelText","span","InputForm","input","SubmitButton","button","ContactForm","onSubmit","this","props","onAddContact","type","name","pattern","title","required","onChange","onHandleChange","Component","LabelContacts","LabelContactsText","AccentText","InputContacts","Filter","ContactListSection","ul","ContactListItem","li","ContactItemText","DelContactButton","ContactList","filtredDataArr","map","contactItem","number","value","id","onClick","onDelete","App","state","contacts","filter","handleChange","event","inputData","target","setState","addContact","preventDefault","newId","uuidv4","message","forEach","alert","length","prevState","filterDataHandle","filterContacts","stateFilterItem","isName","parseInt","isNaN","toLowerCase","indexOf","deleteContact","contactElem","index","splice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.08137ff7.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\r\n\r\nexport const FormPhoneBook = styled.form`\r\ndisplay: block;\r\nwidth: 320px;\r\nborder: 2px solid black;\r\npadding: 10px;\r\n\r\nmargin-left: 5px;\r\n`;\r\n\r\nexport const LabelForm = styled.label`\r\ndisplay: flex;\r\nflex-direction: column;\r\nfont-size: 20px;\r\n`;\r\n\r\nexport const LabelText = styled.span`\r\nmargin-bottom: 5px;\r\n`;\r\n\r\nexport const InputForm = styled.input`\r\nwidth: 150px;\r\nmargin-bottom: 20px;\r\n`;\r\n\r\nexport const SubmitButton = styled.button``;\r\n\r\n","import React, { Component } from 'react'\r\nimport {FormPhoneBook, LabelForm, LabelText, InputForm, SubmitButton} from 'components/ContactForm/ContactForm.style'\r\n\r\nexport class ContactForm extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <FormPhoneBook onSubmit={this.props.onAddContact}>\r\n                    <LabelForm>\r\n                        <LabelText>Name</LabelText>\r\n                        <InputForm\r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                            required\r\n                            onChange={this.props.onHandleChange}>\r\n                        </InputForm>\r\n                    </LabelForm>\r\n                    <LabelForm>\r\n                        <LabelText>Number</LabelText>\r\n                        <InputForm\r\n                            type=\"tel\"\r\n                            name=\"number\"\r\n                            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                            required\r\n                            onChange={this.props.onHandleChange}>\r\n                        </InputForm>\r\n                    </LabelForm>\r\n                    <SubmitButton>Add contact</SubmitButton>\r\n                </FormPhoneBook>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const LabelContacts = styled.label`\r\ndisplay: flex;\r\nflex-direction: column;\r\nfont-size: 20px;\r\nmargin-left: 15px;\r\n`;\r\n\r\nexport const LabelContactsText = styled.span`\r\nmargin-bottom: 10px;\r\n`;\r\n\r\nexport const AccentText = styled.span`\r\ntext-decoration: underline;\r\nfont-weight: 600;\r\n`;\r\n\r\nexport const InputContacts = styled.input`\r\nwidth: 150px;\r\n`;","import React, { Component } from 'react'\r\nimport { LabelContacts, LabelContactsText, InputContacts, AccentText } from \"components/Filter/Filter.style\"\r\n\r\nexport class Filter extends Component {    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <LabelContacts>\r\n                    <LabelContactsText>Find contacts by <AccentText>name</AccentText> or <AccentText>number</AccentText></LabelContactsText>\r\n                    <InputContacts onChange={this.props.onHandleChange}/>\r\n                </LabelContacts>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const ContactListSection = styled.ul`\r\nmargin-left: 15px;\r\n`;\r\n\r\nexport const ContactListItem = styled.li`\r\ntext-transform: capitalize;\r\n:not(:last-child){\r\n    margin-bottom: 15px;\r\n}\r\n`;\r\n\r\nexport const ContactItemText = styled.span``;\r\n\r\nexport const DelContactButton = styled.button`\r\nmargin-left: 10px;\r\n`;","import React, { Component } from 'react'\r\nimport { ContactListSection, ContactListItem, ContactItemText, DelContactButton } from 'components/ContactList/ContactList.style'\r\n\r\nexport class ContactList extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <ContactListSection>\r\n                    {this.props.filtredDataArr.map((contactItem) => (\r\n                        <ContactListItem key={contactItem.id}>\r\n                            <ContactItemText>{contactItem.name}: {contactItem.number}</ContactItemText>\r\n                            <DelContactButton\r\n                                value={contactItem.id}\r\n                                onClick={this.props.onDelete}>\r\n                                Delete</DelContactButton>\r\n                        </ContactListItem>\r\n                    )) }\r\n                </ContactListSection>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\nimport { ContactForm } from \"components/ContactForm/ContactForm\";\nimport { Filter } from \"components/Filter/Filter\";\nimport { ContactList } from \"components/ContactList/ContactList\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport default class App extends Component {\n  state = {\n    contacts: [],\n    filter: \"\",\n    name: \"\",\n    number: \"\",\n  };\n\n  handleChange = (event) => {\n    const inputData = event.target.value;\n    this.setState({\n      [event.target.name]: inputData,\n    });\n  };\n\n  addContact = (event) => {\n    event.preventDefault();\n    const newId = uuidv4();\n    const { name, number, contacts } = this.state;\n    let message = \"\";\n    contacts.forEach((contactItem) => {\n      if (contactItem.name === name) {\n        message = `${name} is already in contacts.`;\n        alert(message);\n      }\n      if (contactItem.number === number) {\n        message = `${number} is already in contacts.`;\n        alert(message);\n      }\n    });\n    if (message.length === 0) {\n      this.setState((prevState) => ({\n        contacts: [\n          ...prevState.contacts,\n          { id: newId, name: name, number: number },\n        ],\n      }));\n      event.target[0].value = \"\";\n      event.target[1].value = \"\";\n    } else {\n      event.target[0].value = \"\";\n      event.target[1].value = \"\";\n    }\n  };\n\n  filterDataHandle = (event) => {\n    const inputData = event.target.value;\n    this.setState({\n      filter: inputData,\n    });\n  };\n\n  filterContacts = () => {\n    const { contacts } = this.state;\n    const stateFilterItem = this.state.filter;\n    const isName = parseInt(stateFilterItem);\n    if (isNaN(isName)) {\n      const newArrData = [\n        ...contacts.filter((contactItem) => {\n          return (\n            contactItem.name\n              .toLowerCase()\n              .indexOf(stateFilterItem.toLowerCase()) > -1\n          );\n        }),\n      ];\n      return newArrData;\n    } else {\n      const newArrData = [\n        ...contacts.filter((contactItem) => {\n          return contactItem.number.indexOf(stateFilterItem) > -1;\n        }),\n      ];\n      return newArrData;\n    }\n  };\n\n  deleteContact = (event) => {\n    const { contacts } = this.state;\n    contacts.forEach((contactElem, index) => {\n      if (contactElem.id === event.target.value) {\n        contacts.splice(index, 1);\n      }\n    });\n    this.setState({\n      contacts: contacts,\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm\n          onHandleChange={this.handleChange}\n          onAddContact={this.addContact}\n        />\n        <h2>Contacts</h2>\n        <Filter onHandleChange={this.filterDataHandle} />\n        <ContactList\n          onDelete={this.deleteContact}\n          filtredDataArr={this.filterContacts()}\n        />\n      </div>\n    );\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}